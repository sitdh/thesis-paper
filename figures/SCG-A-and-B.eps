%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 411.250000 237.250000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 412 238
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 412 238
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


001C08B1FC49FE8007C300010000000000000000000000000000000401F400330288FFFA02AD004E04BE0037000000480078013C017200000001000000040096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/uni2B91 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C9EA963332618F471070EE193F61A94258BC6AD24214B0D5C35EA1380EBC43D26032C674BF749EACE9AA6138229683D0A55F704938EAEA24BEDCF18201FD678EDACEDDD532A75F4D55CA7E47877E44FE3DFF576C7B479D26F13EE6987DE0EC07DFA442C5F0CA831FDCBEA4F68C19071F523255FDEB6BBC840E843A82723E30CD6495A152AFB1CCFDAA55A9B99C12C4573C49D09D178D6E285CBD4FD808ED5A3C5299AE89E642B991EE7F69482D02B84F294D3D86DE599E43CDF923EE120AD5BA8152C3D04F8FE6D6B855229B492E2C920A2ED174E262C60877FF0BDAE76A84B641D7D07B050D6FB20D4D7089498A143D1316FD55B023911A9D05E1FFE871222D4C5FEC6F38BDE86512058F0F72EC0D9C08D296D1E0B37DF907F7D491ACCECD14C40B16E6416544031F3C34F6CF2ADB6615D96A5063639D7AA11DCE55566A2C430DB36E2C717141389E0CFDD0CD2C226D051B9EDC8607EEC9F4748B6E12074BCF982E27BDD64819A50D82D5F046CCA4E590B0C6A77CB0DC630E35D15FD94E86C407FC4071BA46962BEA149512EEF1ED3DE8C814FD8A4F164F525805AD0093EB5354F9033F9FD34C167BD9F5A13EC5614655DE4C9497BA301F0A5D82EFED33E8ACF20FDED51F6A69BBAF0A1327015BA9B5B69A09005FEADE6DBB45943A17B1EA3325A916B1F192043F657D51225C97028238E553B4399E03FC694C826C973C4B7B1FB14EED91F34
39DA414501E46F52D23D336CB254D46AE549F87176AA46C03969B665F85D0139FCCAA90C8B1FECD8814E26DE9AA4959FB37E7218FEEF7B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Thonburi
%!FontType1-1.0: Thonburi 1.0000.1.0000
14 dict begin/FontName /Thonburi def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /g put
dup 34 /r put
dup 35 /a put
dup 36 /d put
dup 37 /i put
dup 38 /n put
dup 39 /colon put
dup 40 /e put
dup 41 /t put
dup 42 /G put
dup 43 /L put
dup 44 /P put
dup 45 /A put
dup 46 /X put
dup 47 /S put
dup 48 /u put
dup 49 /o put
dup 50 /fi put
dup 51 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2560 -1531 1 index div -1463 2 index div 3957 3 index div 3585 5 -1 roll div]cvx def
/sfnts [<


805150502955A7CA7DDC012FE1960D0D2F5D29BA77508D5D4D347B89889D93FEEF8E68EE8D00000000010027000005F30794000B005B00B800004558B800032F1BB90003000D3E59B800004558B800062F1BB90006000D3E59B800004558B800002F1BB9000000073E59B800004558B800092F1BB9000900073E59BA000500000003111239BA000B0000000311123930312123090121090133090121010126FF026DFDC4011401B701D2FBFDAD0256FEF0FE2D03D903BBFD2402DCFC59FC13030D00000000020088FFD9050A059C0022002F0140B800302FB8002F2FB80002D0B8003010B80008D0B800082FB8002F10B8000CD0B8000810B900270006F441110066002700760027008600270096002700A6002700B6002700C6002700D6002700085D410500E5002700F5002700025DB80013D0B800132FB8000810B80015D0B800152FB8002F10B9001F0005F4B80031DC00B800004558B8001A2F1BB9001A000B3E59B800004558B800002F1BB9000000073E59B800004558B800052F1BB9000500073E59BA00020005001A111239B8001A10B900100002F4410500E9001000F9001000025D41110068001000780010008800100098001000A8001000B8001000C8001000D8001000085DB8000510B9002B0002F441110067002B0077002B0087002B0097002B00A7002B00B7002B00C7002B00D7002B00085D410500E6002B00F6002B00025DBA00220005002B11123930312126350E0123222635342425373534262322061D01233534362433321E0115111416170107040615141E0133323E013504152499D863A6EF0151019B7DAD7991A2FD9C01039A98FA730928FEE746FE9EC53A733961BD6971519752CCB3CADC50189E80687F5514125DC5645FA1DEFDE159C48202C111579B6B375F3572BE7E0000020074FFD9056007E200130020013EB800212FB800002FB900010005F4B8000010B80003D0B8002110B8000CD0B8000C2FBA0004000C0001111239B8000010B80014D0B8000C10B9001A0005F441110066001A0076001A0086001A0096001A00A6001A00B6001A00C6001A00D6001A00085D410500E5001A00F5001A00025DB8000110B80022DC00B800002FB800004558B8000F2F1BB9000F000B3E59B800004558B800022F1BB9000200073E59B800004558B800082F1BB9000800073E59BA000400080000111239BA001300080000111239B8000F10B900170001F4410500E9001700F9001700025D41110068001700780017008800170098001700A8001700B8001700C8001700D8001700085DB8000810B9001D0001F441110067001D0077001D0087001D0097001D00A7001D00B7001D00C7001D00D7001D00085D410500E6001D00F6001D00025D303101331123350E022322240235100021321E01171134022322021110163332




00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/colon 1 def
/A 2 def
/G 3 def
/L 4 def
/P 5 def
/S 6 def
/X 7 def
/a 8 def
/d 9 def
/e 10 def
/g 11 def
/i 12 def
/l 13 def
/n 14 def
/o 15 def
/r 16 def
/t 17 def
/u 18 def
/fi 19 def
/luthai_saraaathai 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.000390625 0 0 0.000390625 0 0 ] def
/FontBBox{-1531 -1463 3957 3585}def
/UniqueID 4158355 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92633B2598E0B1EDFA3C2732C9D3498122A5E23C1999619F9F2A05B057FE1367BD91882364DABCCA0C86692EB405F9B133BC74B44975C2A16DE3A0C3C0CA54E8F153D1D395A43E4891AF59F3822E621AC162E21B8C1A57E60CD9D1CA29021F6D9F006FB7166F355709DB637A33FC4C1E393E065C75A7EFD0F6BDB84DCEDF33AFF25786EBD37452A835DE4A6E21798E0F60535ADA53DB6E70ECCE90B26CBA03C06564268D29AA72DE94685F5A423320990239F8AC221126316E25FF2698D1061D911D8EBADF9CDACAB986A0B55C4DD6437F499FB3E23215412D196D0BA0C8F7423B4C95BA22B11B09837480A1C96E91AA8B26447B968E28C3B6F663A681EAD6B51C5A2B2AA4D039C8948955CFEFDE2D158892EA004880E34DD2E0376B318F08788F216B4F90844BA246506033F9189071436A9708B25E03E87A645A47D24BB0117D563C312C7D59B7D3B79B380EEC819FAB048A17936F7D159D6F343C29D1DBDC0DBA583D9FF7DDB28E2CE2092A107206301296A9031133E8985CDC19CBD140C41604556001437A98B014B755A36D5204560BAD3B96AFB8B89F71DDBBBEECDAC0B016C38C14402E275C6101ECD30B0E2956761422BA66BF29446CA3D23AE2C4E3AE86543097D69662E9F2D3BC8D4D319D12B5FBE2B0285A19842A960F710DC179C09407B439B215CD392C44D6FAC8C121AEBCD52BE783C4839825ECF3B9DAA78AD5F66A9DF2F9725854C25892AB83DD77372BE310EA95F7363390A826B0DE5C1FEA
D6BE6E733C68EC323F00EE31690ED6377D8FB780C9AA296FA9B0336692626CC4BAE0FB96EBCB51890BD3AA900DA0800F529AE806C5B49FF8F29CE7F3592B3DE2BCB54D43DA5978EB8BC7FFA087EACE23E235308FB9B9B55A99FEBC9580EF68B0BF671C5CFC9C22E13823BE2119C28B52428E7DEC09A689659F99920F8EE84A78710F676856F2B8E5603B13D78F8A8FB062456CECE24B663C2B293703DF09A9046726DAA611FCDFA068F579F7BF56CD8A0049BD99788EB364B3C77275AFF3DF1071B6FF30680B1540171ABC043C8332C47DF389BBEEDD50EBFF5F774DD3DE0CDDDFFC8302ECC578482F425DBD73ABCBBE575F0BB6F90F03FDFEC04E15C4319419602C3869F214C71B77CC5F892472F3C2FF2A35C762590CFD53D381E37CEA5D7E5A97F61073554A4293142BFF6418FE557AC7C3C9E125D30D3DD4AA149D834A5CBA0685ED900607D6D01E54FA6717D6DF66FD186D441D8C02F05012A3701EA95B7F6E6051E2C0674F5D0A259D72E727966CD9F889589023CA5DA0D9B4A24FA5ACDC1FD45AB75C4DEFDCB5113ED1D6CF641AE9D106884BED75AAA52574117ECC1A05E1F08F90F9C36764D7DE99EE1CF776DC5B538A6260824654338092F2706197FF27D3470761AAA4795CE1A38E42C16206A6399A80782F4D878E8278E729F505D926003E156D311560FFCEAE6C04DA19CC3BDF139B69690E7E44A702F7AAD4BF283327A719966161C1CC20C44FCDCFCBF7C40C4863A831493F277776C1EA25034BD9E45A7C909E5D253F6F54F79F9A4B646232B8F2895462F31F8AD66AC6FAC7B26D7E572164EF7AB64C36D6FCFF68E734A48A61C9A5C529BE8478AEA6AEB6439AB5D3B6C8A3C4CB05BA5395D5B15BE528C278598330CAE691008DB26FF8141019B76AE69C9AEE029F93250228CD370CD639E864C4F6AE085E80EF7112361BEF4C77FED3423BAF654CC28003669DFC237D0613E78BFA7DC958BFBD726E2663AABCC6C0A98FD4D00CA7231D6FA26228524A9FCB7FF55A8E65D888E3ECD7180FC360706CB3C0DAEB250A26EE965C91EB223658B97FF520B3207863B9D95AC2B28B3ADCDCF0D2173E9EF3CFB5AFF3C75FF70B5D874224C8FC7F6E789CB281CF9BEAEE5397037848D690F1361BA289E21CF785B462DD505E5AFBF9BF4F935EBA9AE1A71FEF79BB57509EF56AB7F4220FCCEBE36335FC9CFFB7CBC6285A9F890F242F8352B54E3A7BD012D74A2E50B4CF391103B96E43C1DBA82C1EE11C02A0174CE3D5B7A34A4DFEBAA2AACB3B3551FA36B0C1C59C5B4909B65662A1B1CCEF6E1C14BF27C443900FFA5F8498FD32ECF45E56663777E78F15833043BCD2E16F498971BDFCE9F635BB811B0B59751FC5825E01068127279668E760F95774F65085B10A0FB5C568CDC5B19E63A6310EE3C57714D86C9687AD8DE9AE8A5E352F9C8EC686
A6BF094DA59B0382146074956B467FEB9D5AEE5DDA56C17997EAF01B20C2FF030841A2FC1528B0FCD34C59259597ACAAF94FBA351FB692BD26B4732F130B965FC76F3BC01BEE72326F05FDDFF8A9C1D355E5E222CDDB75B8FE9AFD7025F551C69E5DF1E833892C3BC4DBD6B7C10D563B2A5A230A91D432D061C6E93CAE4DC6C41021537BC3F7FFE3A4CFF69821CFFFE41E35FFA6CF81D87A092B2722380109E2F8D08738B8D52B7BFCC2DA88362008B87E9563A78C382FC8845983D8BFAE7B9761DA0FDA1044A8EA6A8543F9FE8FBA53A488727C2A4AB6F8DA1522D004CDA881350FB2E186021AB7D6BCC58F901A7DE61D619B22A92B88C2C0FF4DFA3C8AB69F912AEED89894D77D76831655EC0E0AA30D484657F1F5E14F92A234E47D3540D22616D8725EF70F1F3D41F2543B53EB6659EBB29ADF84478B03E3308EF9725C00D829A23B310B0D193A1BC299E4E78A8664B5EA2DF8EBC331B378FB14764438D802568BC2A6A3CB970C4DA31466A6F78A97D8FADFCD3868346504B1738B7F52CFD740799323CDB18AA1019A9B29E07D163C5C23130EADB68725EE7F98DCE0C1E0EEF5EDC3C7505F694CACF824345F4DAC677BD356B3D281075E4A7724AA6422E2DFC565A9A100E4990631A8BBDFD6D8FC025840A98DE7614E8AC153174039EB4C100459628FBD9980C0E046C05388E9FCF3A78D6D687B3CB065C5C5C89C0B709F0B63EC6A5158A33A024AC1279B8CB25521071A889B8E4363524DE9083E304683E28D440ECCE866642C2183905A4DEC52E1AA64D49FE6BA8ECF000C171919D4811332AF2608379A33FFF0065F5FAA8E28EC31960FAF3BFF733D48BE93C34358B95076D4F70335F271C5BDD918D8216F7BA6233C80E8DD0CC2B89BDF856A1141E5BDCFEDB2AD5B7E07B349633A968E895784D12CB9B48C7ABD87928D9C4B0166F065738E7F63DB5D2E30BBDD360AF337C718936AE1B0BBF573604DC72089CE4F58907C954A5BDC0EBBFA536B2B90FF037F69E87319C3A942FBF5AC11BFDCE829E896F381E8174E6DBC9AF3C81D3CB9112448B559AB9C12E3047DDD1E4EDECD5C820A34E671F2777CBEC99989EC4FFF96600AA1BFC82C86EE4018718F53B3D3463034FF449C005FA46B7E475AC3D97D51220E33E96366C5C6E8C85A21D966B03BEEE29D8DD89303815F7EA5930EA8256B1118CA0FDF824B7D64596757FFD4BD8597C9DD1E46746A71FE1A039ABCF75CCA69F7DABD9244EDA979D1126FFB8C387F938A4B0DC1F558AB74CEF2E9B5B4CC5FA11EBB52A4AF19B80DCA4DC0BFE4D879DAB3162C772E7A0FD09536734D5EEFFE2E3B5CDFF87AE86B59B3EE28ECA786DF563CA91C4E2A239FFB3374B35BDBD9CB5655807EB30F02E903ED1A9666E09210952C74CBB4EFD2F79A5E0E59B8169FDA7CE415C4154ADB7CC459E16137FDE943C8
33071A6AC8FA6266BA973402E08D4617A736FF01AAD05FE1B2DD1812C220A48D9BE9BE199069145EE8F725612235F0820C6FC3CFEF6A826174618E2A9DB1308F81CE1A11EDB6F74668D9E17137137373A4A4A23F92C92463903AD72070C67E216D23CFF33C2DD619E7F582E1E298FA6F26169B51ED3B3633BAAD54C6E3E110FE9281545E0D116D41429423CD0C4653D41A7961A0B6238EB499D88F61129FD519DFBF1D023EE1E7C9C7E1EAE3DEAD3C3E2F8FB8EA984FC5CDA47D5C7DEA979C71371EA89F52C0FF030DCBE00031A1AA65996818E603C22A956EC8F697DA190B20F82FDBE7B6471A44FA33A2BFE5DF9C5F216F083D8569E510337DBDACCA8C8FDFC58ABCBCB8A6D5EBC9DD575BAB093F9AF1549B5790AEEE6BC0C99F5AD08148B3C8E302636BA91351BB94DED9715C50E611D40D9546DE883E5BEB2EBC90E0E15A026D3B3326CD29662414EA6C96A2A117154F4612692F1CBAA2CAB2F8C0593C5DA10BCE3CD551C31E24D98BFA22D9733496922BAF2C92198A3D06F0BF3834FE209FD51DDE80F3DA632130797EDEA635745DE4A7BC9FFE0D43CA8397445EA32F97A7B074B11C06B595222DE48F2FAD79BDA84785AE3A7B5E180B5A5B06938AD3C533BC3B5FEBB1C638CBFC4800472A92166E7FD3848B4040F4650CE20726837C6DD1984F6498BAB75741303CCC60DE04FC7B6DA03756A008D6C3D6AA64994F42EAB5AF9B987DEBB6FE32AB7F9B7DEB357664F5D24CC0C3AC3D722BBF204420C01AA03F8DBEC1A88B9C545B710717D309583B030FDA927A8973C7501A660440947FBFF4B69865A0D3384780365F0E5142CFA02ECC96150CB7A54067068CC297E8CEC0F0426F143A6DE0D2CAED8E351F633CF70524B792C524FFB4BAB6CFD574A2BE70DE8D500EA2489CA034260BFBBD214FAFE53D586F23C43A3F030E67848B7A3C5AA1963F2B90F96D41E356E1292D808740F10E8408ED3F42A8A23E3A2CCEF656E2D4AF2C416D8A3A33F7FE976666B51E33411B519969EC641610E575DFBD6B521A6EB2B8E9B3536C9F60FAC7BEE167CA469FA7F3B6AB655373FA16E0E48C4F8B510DC4BA48A248AC2ACA6FF12FF575EFF19E727AF0DE13BFAECDA4CE28D91AB8DF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Thonburi cguidfix
/F2.1/Thonburi renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 411.25 237.25 rc
-68.875 1156.125 m
2217.125 1156.125 l
2217.125 -1039.875 l
-68.875 -1039.875 l
h
-68.875 1156.125 m
f
58.216862 131.21686 m
68.761063 120.67271 68.761063 103.57729 58.216862 93.033134 c
47.672714 82.488937 30.577286 82.488937 20.033138 93.033134 c
9.4889364 103.57729 9.4889364 120.67271 20.033138 131.21686 c
30.577286 141.76106 47.672714 141.76106 58.216862 131.21686 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -68.875 1156.125 cm
127.09187 1024.9081 m
137.63606 1035.4523 137.63606 1052.5477 127.09187 1063.0919 c
116.54771 1073.6361 99.452286 1073.6361 88.908134 1063.0919 c
78.363937 1052.5477 78.363937 1035.4523 88.908134 1024.9081 c
99.452286 1014.364 116.54771 1014.364 127.09187 1024.9081 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 39.125 112.125 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.184 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
391.21686 131.21686 m
401.76108 120.67271 401.76108 103.57729 391.21686 93.033134 c
380.6727 82.488937 363.5773 82.488937 353.03314 93.033134 c
342.48892 103.57729 342.48892 120.67271 353.03314 131.21686 c
363.5773 141.76106 380.6727 141.76106 391.21686 131.21686 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -68.875 1156.125 cm
460.09186 1024.9081 m
470.63608 1035.4523 470.63608 1052.5477 460.09186 1063.0919 c
449.5477 1073.6361 432.4523 1073.6361 421.90814 1063.0919 c
411.36392 1052.5477 411.36392 1035.4523 421.90814 1024.9081 c
432.4523 1014.364 449.5477 1014.364 460.09186 1024.9081 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 372.125 112.125 cm
-5.48 5.776001 m
(")s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -68.875 1156.125 cm
135.00002 1044 m
404.09998 1044 l
S
0 i
CM
343.22498 112.125 m
335.22498 115.125 l
335.22498 109.125 l
h
343.22498 112.125 m
f
0 J
0 j
1 0 0 -1 -68.875 1156.125 cm
412.09998 1044 m
404.09998 1041 l
404.09998 1047 l
h
412.09998 1044 m
S
1 J
1 j
0.60000002 i
116.877 1018.4944 m
168.7563 909.42853 362.46271 929.72943 424.52917 1011.1246 c
S
0 i
CM
360.20502 138.42421 m
358.11957 146.70979 l
353.18573 143.29552 l
h
360.20502 138.42421 m
f
0 J
0 j
1 0 0 -1 -68.875 1156.125 cm
429.08002 1017.7008 m
426.99457 1009.4152 l
422.06073 1012.8295 l
h
429.08002 1017.7008 m
S
1 J
1 j
0.60000002 i
115.04365 1070.0698 m
157.16957 1165.881 355.65985 1137.915 421.28217 1074.9175 c
S
0 i
CM
357.89175 87.031502 m
350.22314 83.264229 l
354.59116 79.150772 l
h
357.89175 87.031502 m
f
0 J
0 j
1 0 0 -1 -68.875 1156.125 cm
426.76675 1069.0935 m
419.09814 1072.8607 l
423.46616 1076.9742 l
h
426.76675 1069.0935 m
S
1 1 1 sc
CM
119.23026 125.625 m
265.23026 125.625 l
265.23026 98.625 l
119.23026 98.625 l
h
119.23026 125.625 m
f
/Cs2 SC
0 sc
1 0 0 -1 192.23026 112.125 cm
/F2.1[ 12 0 0 -12 0 0]sf
-67.865623 4.5991821 m
(!"#$%&!'!\(\)*"#$\(+\(\)\)\(")[ 7.317188 4.635937 6.637500 7.223438 2.817187 7.003125 7.317187 3.637500 7.317187 6.909375 5.320313 8.090625 4.635938 6.637500 7.223438 6.909375 7.003125 6.909375 5.320312 5.320312 6.909375 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
143.94774 226.23994 m
251.94774 226.23994 l
251.94774 199.23994 l
143.94774 199.23994 l
h
143.94774 226.23994 m
f
/Cs2 SC
0 sc
1 0 0 -1 197.94774 212.73994 cm
-48.635155 4.5991821 m
(!"#$%&!'!\(\)*,-.)[ 7.317188 4.635938 6.637500 7.223438 2.817188 7.003125 7.317188 3.637500 7.317188 6.909375 5.320312 8.090625 7.003125 8.723438 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
118.40954 38.008873 m
277.40955 38.008873 l
277.40955 11.008874 l
118.40954 11.008874 l
h
118.40954 38.008873 m
f
/Cs2 SC
0 sc
1 0 0 -1 197.90955 24.508873 cm
-74.003906 4.5991821 m
(!"#$%&!'!\(\)/\)0$\(&\),"123\()[ 7.317188 4.635937 6.637500 7.223438 2.817187 7.003125 7.317187 3.637500 7.317187 6.909375 5.320313 7.270312 5.320312 7.003125 7.223438 6.909375 7.003125 5.320312 7.003125 4.635938 7.270312 7.185937 2.817187 0.000000 ] xS
ep
end
%%Trailer
%%EOF
