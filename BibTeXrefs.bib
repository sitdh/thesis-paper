@string{jgr = "References"}

@book{Jorgensen2013,
    abstract = {This updated and reorganized fourth edition of Software Testing: A Craftsman's Approachapplies the strong mathematics content of previous editions to a coherent treatment of Model-Based Testing for both code-based (structural) and specification-based (functional) testing. These techniques are extended from the usual unit testing discussions to full coverage of less understood levels integration and system testing. The Fourth Edition: * Emphasizes technical inspections and is supplemented by an appendix with a full package of documents required for a sample Use Case technical inspection * Introduces an innovative approach that merges the Event-Driven Petri Nets from the earlier editions with the "Swim Lane" concept from the Unified Modeling Language (UML) that permits model-based testing for four levels of interaction among constituents in a System of Systems * Introduces model-based development and provides an explanation of how to conduct testing within model-based development environments * Presents a new section on methods for testing software in an Agile programming environment * Explores test-driven development, reexamines all-pairs testing, and explains the four contexts of software testing Thoroughly revised and updated, Software Testing: A Craftsman's Approach, Fourth Edition is sure to become a standard reference for those who need to stay up to date with evolving technologies in software testing. Carrying on the tradition of previous editions, it will continue to serve as a valuable reference for software testers, developers, and engineers.},
    author = {Jorgensen, Paul},
    file = {:Users/sitdh/OneDrive/Thesis/Papers/Books/doc.pdf:pdf},
    mendeley-groups = {Books},
    pages = {470},
    publisher = {Auerbach Publications},
    title = {{Softare Testing: A Craftman's Approach}},
    year = {2013}
}

@article{Luanghirun2016,
abstract = {In modern web application development, JavaScript is the most popular programming language for implementation and test framework automation is usually applied in unit testing. However, developers spend a lot of time to create test script manually. Thus, creating automated test script tool can support them efficiently. Nonetheless, a tool for generating test script by randomly creating test input cannot guarantee that all paths of the code is executed and it takes significant of time on testing to reach a high code coverage. This paper proposes a tool for generating test cases from JavaScript function and executing test cases to cover all statements coverage criteria. The tool can analyze and instrument JavaScript code to generate a control flow graph and test cases by selecting data based on test paths and input vector to drive the paths, evaluate coverage, execute test cases, as well as display a test report.},
author = {Luanghirun, W and Suwannasart, T},
file = {:Users/sitdh/OneDrive/Thesis/Papers/Books/IMECS2016{\_}pp479-482-2.pdf:pdf},
isbn = {9789881925381},
journal = {Lecture Notes in Engineering and Computer Science},
keywords = {2,analyzing path predicate expression,automatic testing,by,for automatic,in this paper,input,javascript,path predicate expression,software testing,to generate test cases,vector,we propose a tool},
mendeley-groups = {Testing},
pages = {479--482},
title = {{Test cases generation tool for JavaScript based on statement coverage criteria}},
volume = {1},
year = {2016}
}


@book{Jalote:1997:IAS:549018,
 author = {Jalote, Pankaj},
 title = {An  Integrated Approach to Software Engineering},
 year = {1997},
 isbn = {0387948996},
 edition = {2nd},
 publisher = {Springer-Verlag New York, Inc.},
 address = {Secaucus, NJ, USA},
}

@INPROCEEDINGS{4425952,
author={M. Sarma and D. Kundu and R. Mall},
booktitle={15th International Conference on Advanced Computing and Communications (ADCOM 2007)},
title={Automatic Test Case Generation from UML Sequence Diagram},
year={2007},
pages={60-67},
abstract={This paper presents a novel approach of generating test cases from UML design diagrams. Our approach consists of transforming a UML sequence diagram into a graph called the sequence diagram graph (SDG) and augmenting the SDG nodes with different information necessary to compose test vectors. These information are mined from use case templates, class diagrams and data dictionary. The SDG is then traversed to generate test cases. The test cases thus generated are suitable for system testing and to detect interaction and scenario faults.},
keywords={Unified Modeling Language;program testing;UML design diagrams;UML sequence diagrams;automatic test case generation;class diagrams;data dictionary;sequence diagram graph;system testing;test vectors;use case templates;Application software;Automatic testing;Computer science;Design engineering;Dictionaries;Fault detection;Information technology;Object oriented modeling;System testing;Unified modeling language},
doi={10.1109/ADCOM.2007.68},
month={Dec},}

@INPROCEEDINGS{7339088,
author={S. Z. Waheed and U. Qamar},
booktitle={2015 6th IEEE International Conference on Software Engineering and Service Science (ICSESS)},
title={Data flow based test case generation algorithm for object oriented integration testing},
year={2015},
pages={423-427},
abstract={Testing is way of insuring quality of the product. Object oriented testing is challenging task. It becomes more intense in integration level when different units interact for proper functioning of system. These Interacting Objects must be in desired state to achieve the required coverage. This can be achieved by generating method sequences. Manually test case generation is a tedious job and in object oriented testing method explosion make it worst. In this paper we propose a novel approach for test case generation of object oriented integration testing. Search space is reduced by selecting the coupling methods that are directly involved in integration. Further def-use analysis helps in achieving the desired object states for proper interfaces testing, representing methods in testing tree. This paper also identifies problematic cases and their solutions in method sequence generation. Results shown significant improvements in object oriented integration testing.},
keywords={data flow computing;object-oriented methods;program testing;data flow based test case generation algorithm;def-use analysis;interface testing;method sequence generation;object oriented integration testing method;product quality;product testing;Computers;Couplings;Explosions;Object recognition;Software;Software testing;DU-analysis;Object Oriented Testing;Path coverage;SUT;Test cases;Test criteria},
doi={10.1109/ICSESS.2015.7339088},
ISSN={2327-0586},
month={Sept},}
