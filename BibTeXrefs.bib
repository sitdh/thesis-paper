@string{jgr = "References"}

@book{Jorgensen2013,
    abstract = {This updated and reorganized fourth edition of Software Testing: A Craftsman's Approachapplies the strong mathematics content of previous editions to a coherent treatment of Model-Based Testing for both code-based (structural) and specification-based (functional) testing. These techniques are extended from the usual unit testing discussions to full coverage of less understood levels integration and system testing. The Fourth Edition: * Emphasizes technical inspections and is supplemented by an appendix with a full package of documents required for a sample Use Case technical inspection * Introduces an innovative approach that merges the Event-Driven Petri Nets from the earlier editions with the "Swim Lane" concept from the Unified Modeling Language (UML) that permits model-based testing for four levels of interaction among constituents in a System of Systems * Introduces model-based development and provides an explanation of how to conduct testing within model-based development environments * Presents a new section on methods for testing software in an Agile programming environment * Explores test-driven development, reexamines all-pairs testing, and explains the four contexts of software testing Thoroughly revised and updated, Software Testing: A Craftsman's Approach, Fourth Edition is sure to become a standard reference for those who need to stay up to date with evolving technologies in software testing. Carrying on the tradition of previous editions, it will continue to serve as a valuable reference for software testers, developers, and engineers.},
    author = {Jorgensen, Paul},
    file = {:Users/sitdh/OneDrive/Thesis/Papers/Books/doc.pdf:pdf},
    mendeley-groups = {Books},
    pages = {470},
    publisher = {Auerbach Publications},
    title = {{Softare Testing: A Craftman's Approach}},
    year = {2013}
}

@article{Luanghirun2016,
abstract = {In modern web application development, JavaScript is the most popular programming language for implementation and test framework automation is usually applied in unit testing. However, developers spend a lot of time to create test script manually. Thus, creating automated test script tool can support them efficiently. Nonetheless, a tool for generating test script by randomly creating test input cannot guarantee that all paths of the code is executed and it takes significant of time on testing to reach a high code coverage. This paper proposes a tool for generating test cases from JavaScript function and executing test cases to cover all statements coverage criteria. The tool can analyze and instrument JavaScript code to generate a control flow graph and test cases by selecting data based on test paths and input vector to drive the paths, evaluate coverage, execute test cases, as well as display a test report.},
author = {Luanghirun, W and Suwannasart, T},
file = {:Users/sitdh/OneDrive/Thesis/Papers/Books/IMECS2016{\_}pp479-482-2.pdf:pdf},
isbn = {9789881925381},
journal = {Lecture Notes in Engineering and Computer Science},
keywords = {2,analyzing path predicate expression,automatic testing,by,for automatic,in this paper,input,javascript,path predicate expression,software testing,to generate test cases,vector,we propose a tool},
mendeley-groups = {Testing},
pages = {479--482},
title = {{Test cases generation tool for JavaScript based on statement coverage criteria}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978655460{\&}partnerID=40{\&}md5=18a368708b39636238ab98c808356467},
volume = {1},
year = {2016}
}

